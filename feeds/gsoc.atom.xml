<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>All Day I Dream About Science</title><link href="http://siddhantsci.org/" rel="alternate"></link><link href="/feeds/gsoc.atom.xml" rel="self"></link><id>http://siddhantsci.org/</id><updated>2015-06-24T19:53:52+00:00</updated><entry><title>The Half-Life of Telerobotics</title><link href="http://siddhantsci.org/blog/2015/06/24/the-half-life-of-telerobotics/" rel="alternate"></link><updated>2015-06-24T19:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-06-24:blog/2015/06/24/the-half-life-of-telerobotics/</id><summary type="html">&lt;p&gt;Hi all! If you've been following my &lt;a href="http://siddhantsci.org/category/gsoc.html"&gt;previous posts&lt;/a&gt;, you'd have known that the Telerobotics module has been simmering for a couple of weeks. I'm happy to announce that it is almost complete and would hopefully be integrated with Vito's Bodytracking module.&lt;/p&gt;
&lt;p&gt;The last week (week four and five) were the busiest weeks of GSoC for me.&lt;/p&gt;
&lt;h2&gt;Learning Experience&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I learnt A LOT about Python Software Development&lt;/li&gt;
&lt;li&gt;Different types of &lt;a href="http://www.oreilly.com/programming/free/software-architecture-patterns.csp"&gt;software architectures&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/video/1093/the-development-process-of-python"&gt;The development process of Python&lt;/a&gt; by one of the members of the Italian Mars Society who has been the reason I'm able to write more Pythonic code  - &lt;a href="http://wolfprojects.altervista.org/"&gt;Ezio Melotti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.esrf.eu/computing/cs/tango/tango_doc/kernel_doc/pytango/latest/quicktour.html#pytango-quick-tour"&gt;PyTango&lt;/a&gt; Development&lt;/li&gt;
&lt;li&gt;ipython and how helpful it can be for Tango applications&lt;/li&gt;
&lt;li&gt;Message queues - Both ROS and Tango utilize ZeroMQ - which makes integration of ROS and Tango much scalable&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vlfeat.org/overview/sift.html"&gt;SIFT&lt;/a&gt; in Python - I will be working with my mentor Fabio Nigi on this very soon&lt;/li&gt;
&lt;li&gt;Making my own stereo camera&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deliverables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;ROS node&lt;/strong&gt; which collects information from all interesting topics from the Husky robot. This can be found &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/db8c7061f4768534ebb2621296a20a016bd240ad/servers/telerobotics/src/robot-info-collector.py?at=default"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Tango Server&lt;/strong&gt; which integrates with ROS to provide diagnostic information from the robot (&lt;em&gt;Battery Status, Temperature Levels, Current Draw, Voltate, Error Conditions&lt;/em&gt; )&lt;/li&gt;
&lt;li&gt;A simulated version of the Tango server for the Planning and Scheduling application that Shridhar is working on. These can be accessed &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/db8c7061f4768534ebb2621296a20a016bd240ad/servers/telerobotics/src/robot-diagnostics-server.py?at=default"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; Soft Real-time network streaming&lt;/strong&gt; FFMPEG server and Blender Client for a single camera video stream. This can be found &lt;a href="https://bitbucket.org/italianmarssociety/v-eras-blender/src/42063c0b489152a9f124f80824ad095a752c29ff/scripts/webstream/single%20camera/?at=default"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Under &lt;strong&gt;heavy&lt;/strong&gt; Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integration of Bodytracking with Telerobotics. The following message format has been decided upon by the mentors and students:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Attribute definitions for various diagnostic messages&lt;/span&gt;
  &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Linear and angular displacement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                              &lt;span class="n"&gt;display_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EXPERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AttrWriteType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(meters, radians)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;fget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getMoves&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;polling_period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POLLING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;max_dim_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_dim_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;An attribute for Linear and angular displacements&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vito's Bodytracker would &lt;strong&gt;publish events&lt;/strong&gt; in the form of Tango events. The associated data would be a float tuple of dimensions &lt;strong&gt;2,1&lt;/strong&gt; (2 columns, 1 row). Such a tuple, like (3.4, 1.2) would specify a relative linear and angular displacement of the astronaut. My Telerobotics module would &lt;strong&gt;subscribe to this Tango event&lt;/strong&gt; and &lt;em&gt;transform&lt;/em&gt; this data to a &lt;strong&gt;Twist&lt;/strong&gt; message that the Husky can understand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extension of Camera Streaming to a dual camera setup. I am extending the streaming capabilty for a stereo camera.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Midsemester evaluations start tomorrow! Eagerly looking forward to them. It has been an eventful and productive half summer of code. I hope the next half is even more exciting and challenging as the one that passed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ciao&lt;/em&gt;&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>When two Distributed Systems meet!</title><link href="http://siddhantsci.org/blog/2015/06/18/when-two-distributed-systems-meet/" rel="alternate"></link><updated>2015-06-18T19:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-06-18:blog/2015/06/18/when-two-distributed-systems-meet/</id><summary type="html">&lt;p&gt;Hi! This post is meant to be an insight into the experience and progress of the third and fourth weeks of my (a)vocation with the Google Summer of Code Program. Things got much pacier and smooth in the past two weeks. I've been able to get a stable codebase up and running with respect to the aims discussed in the timeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sublime Text Workspace" src="http://siddhantsci.org/images/workspace2.png" /&gt;
&lt;the usual rant&gt; I had to totally restructure my programming workspace for the second time to support Intelligent IDE like features since the Python packages I am working with (ROS and Tango) have a fair number of modules whose documentation I need to read on the fly while coding away. Thus I set up both my &lt;strong&gt;Vim and Sublime Text&lt;/strong&gt; environments to support  &lt;em&gt;intelli-sense&lt;/em&gt;, &lt;em&gt;code completion&lt;/em&gt;, &lt;em&gt;block syntax completion&lt;/em&gt;, etc. I also added a dual monitor setup with the unused LCD television at my home to make for an efficient programming ambience.
&lt;usual rant&gt;&lt;/p&gt;
&lt;h2&gt;Telerobotics Code Pushed&lt;/h2&gt;
&lt;p&gt;As I mentioned in my &lt;a href="http://siddhantsci.org/blog/2015/04/29/gsoc-2015-with-the-italian-mars-society/"&gt;first post&lt;/a&gt;, the contributors of the &lt;strong&gt;Italian Mars Society&lt;/strong&gt; are given &lt;em&gt;write access&lt;/em&gt; to the online Bitbucket repository. This is a tremendous responsibility to ensure that the updates don't disturb the stability of the project. To work with this, I follow the simple and effective advice of my mentors -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;
&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My awesome Commit Message&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This simple algorithm ensures that all students can work at their pace without breaking the system. &lt;a href="http://hginit.com/"&gt;This simple tutorial&lt;/a&gt; can help the uninitiated to understand what I just said.&lt;/p&gt;
&lt;p&gt;So while working with Tango servers for my project, I had to constantly use the bundled GUI - &lt;strong&gt;Jive&lt;/strong&gt; which works as a one-stop solution for &lt;a href="http://www.esrf.eu/computing/cs/tango/tango_doc/kernel_doc/pytango/latest/quicktour.html"&gt;Device Servers&lt;/a&gt;. But my primordial hacker instincts prompted me to write a &lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;CLI&lt;/a&gt; solution to add and remove device servers using the amazing &lt;a href="http://www.esrf.eu/computing/cs/tango/tango_doc/kernel_doc/pytango/latest/#"&gt;PyTango API&lt;/a&gt;. Thanks to Ezio's excellent comments on my commits, I've been able to contribute a Pythonic solution for working with Device Servers in a jiffy. The script can be found &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/2da8222593354228a1eb426bef556654e794365c/servers/telerobotics/utility/setup-device.py?at=default"&gt;here&lt;/a&gt;. It has a nice UI to help the user figure out what he/she needs to enter. I have yet to correct some formatting errors to make it more consistent with PEP8 and the &lt;a href="http://docs.python.org//glossary.html#term-eafp"&gt;EAFP&lt;/a&gt; idiom. The current stage of argument validation is more like LBYL (Look Before You Leap) which is slow for the script's use-case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second module&lt;/strong&gt; I pushed is the &lt;strong&gt;Husky Test&lt;/strong&gt; script to ensure if the Husky installation works or not on a particular setup. The &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/2da8222593354228a1eb426bef556654e794365c/servers/telerobotics/utility/test_husky.py?at=default"&gt;test script&lt;/a&gt; which allows a Husky to move with a particular linear and angular velocity. The &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/2da8222593354228a1eb426bef556654e794365c/servers/telerobotics/doc/sad.rst?at=default"&gt;Software Architecture Document&lt;/a&gt; was also updated to account for the new changes in the ROS-Tango interface architecture. A better understanding of the SAD can be had in &lt;a href="http://siddhantsci.org/blog/2015/05/29/software-architecture-document-for-telerobotics/"&gt;an earlier post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Docker&lt;/h2&gt;
&lt;p&gt;I explained the Docker setup and distribution in a &lt;a href="http://siddhantsci.org/blog/2015/06/12/all-for-docker-docker-for-all/"&gt;quick mini-post&lt;/a&gt;. I tested that the X-errors don't impede with the scripts that I have been developing since ROS topics can be accessed from the command line as well. This is a good thing. The Docker repository for my workspace can be found &lt;a href="https://registry.hub.docker.com/u/sidcode/ros-eras/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Python Reading&lt;/h2&gt;
&lt;p&gt;I have been voraciously consulting the following sources for getting the knack of Python and PyTango programming -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python Docs for &lt;a href="http://docs.python.org/2/"&gt;Python 2&lt;/a&gt; and &lt;a href="http://docs.python.org/3/"&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920027072.do"&gt;Python Cookbook&lt;/a&gt; by O'Reilly Publishers&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920032519.do"&gt;Fluent Python&lt;/a&gt; (early access) again by O'Reilly Publishers&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.esrf.eu/computing/cs/tango/tango_doc/kernel_doc/pytango/latest/index.html"&gt;PyTango documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The happiest point of all this reading kicked in when I could help Vito to reduce &lt;strong&gt;fifty lines of code to just two&lt;/strong&gt; with the use of the &lt;code&gt;exec&lt;/code&gt; construct in Python. In case you're wondering, this is the &lt;a href="https://bitbucket.org/italianmarssociety/eras/commits/2da8222593354228a1eb426bef556654e794365c#Lservers/body_tracker/tracker/tracker.pyT40"&gt;code written by Vito&lt;/a&gt; -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="nt"&gt;joints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_neck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_shoulder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_shoulder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_elbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_elbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_hand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_hand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_torso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_hip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_hip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_knee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_knee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_left_foot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;skeleton_right_foot&amp;#39;&lt;/span&gt;
    &lt;span class="cp"&gt;]&lt;/span&gt;

    &lt;span class="nt"&gt;attr_init_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nt"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;float32&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,),&lt;/span&gt;
        &lt;span class="nt"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;max_dim_x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;polling_period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;POLLING&lt;/span&gt;
    &lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;joint&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;joints&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;exec&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s = attribute(**attr_init_params)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;joint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that without the &lt;code&gt;exec&lt;/code&gt; usage, each line would've to be manually written for each of the joint that we see in the &lt;code&gt;joints&lt;/code&gt; list.&lt;/p&gt;
&lt;h2&gt;Ongoing Stuff&lt;/h2&gt;
&lt;p&gt;There are certain deliverables in the pipeline currently waiting to be pushed to the online repository over the course of the next week. I have been working on -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROS-feedback Aggregator Device Server for Tango&lt;/li&gt;
&lt;li&gt;ROS Commander Node for the Husky&lt;/li&gt;
&lt;li&gt;Tango Client to understand Husky status (battery levels, sensor monitor, etc.)&lt;/li&gt;
&lt;li&gt;Mathematical Transformations and Named Tuples for different structures that Telerobotics requires.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GSoC with PSF and Italian Mars Society is turning out to be fun-and-challenging. Midterm Evaluations start in a week. Lots of work to do. I strongly hope my next post will be a celebratory one highlighting the pushed code I described in &lt;em&gt;Ongoing Stuff&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Until then, Ciao!&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>All for Docker; Docker for all!</title><link href="http://siddhantsci.org/blog/2015/06/12/all-for-docker-docker-for-all/" rel="alternate"></link><updated>2015-06-12T19:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-06-12:blog/2015/06/12/all-for-docker-docker-for-all/</id><summary type="html">&lt;p&gt;Hi! This is going to be a short post about my developments in the Week 3 of my GSoC project. Since my &lt;a href="http://siddhantsci.org/blog/2015/06/08/tango-ing-with-ros-week-2/"&gt;last post&lt;/a&gt;, I have had the chance to work with some exciting state-of-the-art technologies which allow easy distribution and scalability. These are -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker
&lt;img alt="Docker Logo" src="http://siddhantsci.org/images/docker-logo.png" /&gt;&lt;/li&gt;
&lt;li&gt;Tango-Controls
&lt;img alt="Tango Controls logo" src="http://siddhantsci.org/images/tangologo.png" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the &lt;a href="https://registry.hub.docker.com/_/ubuntu/"&gt;Ubuntu 14.04&lt;/a&gt; &lt;em&gt;Docker Container&lt;/em&gt; to setup my system which can be used by anyone in the world as a common platform to test the applications that I am working on. This has multiple advantages -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup-time for collaborators is null. The developer sets up the Docker container and the community members can use it directly.&lt;/li&gt;
&lt;li&gt;Host platform-independent. It doesn't matter whether the collaborator's host system is Arch Linux, Windows 8, or a specific version of Ubuntu. Docker uses &lt;a href="http://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces"&gt;Linux namespaces&lt;/a&gt; and ensures a separation of concerns.&lt;/li&gt;
&lt;li&gt;Revision control mechanism. The developer plays around with a Docker Image just as he/she would do with any other &lt;strong&gt;Distribution Revision Control system&lt;/strong&gt;. I &lt;strong&gt;push&lt;/strong&gt; my changes to the repository (Docker image) and my mentors can simply &lt;strong&gt;pull the updates&lt;/strong&gt; to get the new system configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, I have setup Tango-Controls, ROS Indigo, and the Husky libraries for my Docker image. These can be found in the &lt;a href="https://registry.hub.docker.com/u/sidcode/ros-eras/"&gt;Docker Registry Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The issues that I am currently facing are -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graphics Problems. X-server Bad Drawing errors. A way to get around this will be to better understand how ROS applications use the X-server and then provide Docker the appropriate graphics capabilities. But this does not impede with the Command Line applications of ROS and Tango which I have been working on.&lt;/li&gt;
&lt;li&gt;MySQL connection problems. The workaround currently is to use the Host OS's Tango HOST. I observed that it works fine that way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is it for this post. I mainly discussed about Docker in this post, which was an important thing that we discussed in the &lt;strong&gt;All-hands meeting on 8th June&lt;/strong&gt;. I'll go into much more detail with Tango Controls in the upcoming blog posts and the biweekly reports.&lt;/p&gt;
&lt;p&gt;Ciao!&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>Tango-ing with ROS- Week 2!</title><link href="http://siddhantsci.org/blog/2015/06/08/tango-ing-with-ros-week-2/" rel="alternate"></link><updated>2015-06-08T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-06-08:blog/2015/06/08/tango-ing-with-ros-week-2/</id><summary type="html">&lt;p&gt;Hi! This one is about my &lt;strong&gt;second week of the Google Summer of Code 2015 program&lt;/strong&gt;. It was a busy long &lt;strong&gt;week two&lt;/strong&gt; with some crucial design decisions to be implemented and new things to learn. It was also a hectic week of reading how to write better Python code (&lt;code&gt;Fluent Python - O'Reilly Publishers&lt;/code&gt;, maintaining Python2 and Python3 compatibility, etc) After finalizing on the architecture last week (shown below), it was time to work on implementing it -&lt;/p&gt;
&lt;p&gt;&lt;img alt="ROS and Tango" src="http://siddhantsci.org/images/rostango.png" /&gt;&lt;/p&gt;
&lt;p&gt;Evidently from the diagram, there are &lt;strong&gt;two distributed systems&lt;/strong&gt; involved - both significantly complicated. These are -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tango Controls&lt;/li&gt;
&lt;li&gt;ROS (Robot Operating System)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The  challenge here is to create an &lt;strong&gt;event-triggered Tango Device&lt;/strong&gt; which serves &lt;strong&gt;as both a client and a server&lt;/strong&gt;. This Tango device listens for new events on the Tango bus, and sends data to it when need be. In addition, this is also interfaced with ROS in that the required Tango events for ROS are processed by the device and published to the appropriate &lt;code&gt;TangoROS&lt;/code&gt; topic when required. It also subscribes to &lt;code&gt;ROSTango&lt;/code&gt; topic to listen to any incoming updates from the robot.&lt;/p&gt;
&lt;p&gt;Some use-cases for this are as follows -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Bodytracking server pushes the location/orientation data on the bus.&lt;/li&gt;
&lt;li&gt;The TangoROS Device subscribes to the events of the Bodytracking data on the Tango bus.&lt;/li&gt;
&lt;li&gt;When an event is triggered, the device processes the data into ROS-compatible messages (&lt;code&gt;location&lt;/code&gt; and &lt;code&gt;orientation&lt;/code&gt; are &lt;strong&gt;transformed&lt;/strong&gt; into &lt;code&gt;linear velocity&lt;/code&gt; and &lt;code&gt;angular velocity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;ROS Commander&lt;/em&gt; node (which is subscribed to the &lt;code&gt;ROSTango&lt;/code&gt; topic)&lt;/li&gt;
&lt;li&gt;The ROS Commander node continuously monitors the robot for different measurements (&lt;strong&gt;sensor readings, battery status, navigation feedback, etc&lt;/strong&gt;). The important signals are published to the &lt;code&gt;ROSTango bus&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my first time working with the powerful Tango-Controls system. It is used by -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Italian Mars Society&lt;/li&gt;
&lt;li&gt;The very large solar array network (SAK)&lt;/li&gt;
&lt;li&gt;Synchotrons and Particle Accelerators around Europe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll discuss how I work with Tango and ROS in my next blog post.&lt;/p&gt;
&lt;p&gt;The Italian Mars Society had an All-hands Skype meeting on 8th June, 2015 where all the GSoC students and mentors discussed project status, software architecture document feedback, roadblocks, hardware needs, collaboration, field tests etc.&lt;/p&gt;
&lt;p&gt;Things that were discussed and to be done-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Image for ROS setup (&lt;strong&gt;very important&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Battery status Tango server&lt;/li&gt;
&lt;li&gt;ROS Tango Client&lt;/li&gt;
&lt;li&gt;ROS Tango server for certain use cases&lt;/li&gt;
&lt;li&gt;Tango events&lt;/li&gt;
&lt;li&gt;Timestamp based Transformation of parameters in a time-series data&lt;/li&gt;
&lt;li&gt;Set up the Minoru 3D camera and the Oculus Rift device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a week where I'd like most of these things to fall in place. GSoC is turning out to be exciting and challenging! Til the next post. Over to week three.&lt;/p&gt;
&lt;p&gt;Ciao!&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>Programming a Mars rover - Week 1!</title><link href="http://siddhantsci.org/blog/2015/06/03/programming-a-mars-rover-week-1/" rel="alternate"></link><updated>2015-06-03T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-06-03:blog/2015/06/03/programming-a-mars-rover-week-1/</id><summary type="html">&lt;p&gt;Hi! This is the sixth post in my &lt;a href="http://siddhantsci.org/category/gsoc.html"&gt;GSoC '15 blog series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So the much awaited coding period began on 25th May, 2015. After a refreshing &lt;a href="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/"&gt;Community Bonding&lt;/a&gt; experience, &lt;a href="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/"&gt;setting up my workspace&lt;/a&gt;, and &lt;a href="http://siddhantsci.org/blog/2015/05/29/software-architecture-document-for-telerobotics/"&gt;creating a Software Architecture Document&lt;/a&gt; - I was in a position to start coding.&lt;/p&gt;
&lt;h2&gt;Aims and Milestones&lt;/h2&gt;
&lt;p&gt;This week, according to the &lt;a href="http://siddhantsci.org/blog/2015/05/07/gsoc-15-about-my-project/"&gt;timeline&lt;/a&gt;, my aims were -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating the initial set of ROS nodes for the Husky model for linear and angular motion &lt;/li&gt;
&lt;li&gt;Zeroing in on the basic interface for mapping the Kinect bodytracking information and Motivity interface being concurrently developed by Vito to teleoperation commands that Husky can understand&lt;/li&gt;
&lt;li&gt;Figuring out a way to integrate ROS and Tango into ERAS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far it has been a good week and I am on schedule. I am able to manipulate the motion of the simulated Husky via an external stimuli.&lt;/p&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;Before I describe my programs, let me first describe the high-level architecture with help of a simple diagram -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Telerobotics Architecture" src="http://siddhantsci.org/images/arch2.png" /&gt;&lt;/p&gt;
&lt;p&gt;As is evident from the diagram, there are &lt;strong&gt;two distributed systems&lt;/strong&gt; involved - both fairly complicated. These are -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tango Controls&lt;/li&gt;
&lt;li&gt;ROS (Robot Operating System)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was by far the &lt;strong&gt;biggest challenge&lt;/strong&gt; of the project. Interfacing data from one distributed system to the other while maintaining low latency and ensuring high performance.&lt;/p&gt;
&lt;p&gt;Another challenge was handling real-time streaming data.
I banged my head against Python Streams. Message brokers like &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; and &lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt;. But as &lt;strong&gt;Albert Einstein&lt;/strong&gt; said -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If you can't explain it to a six year old, you don't understand it yourself.” &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All this while, I was confused in transferring data over an &lt;strong&gt;additional&lt;/strong&gt; inter-process communication structure between two distributed systems. Meh. Sounds complicated. It actually is. And that is why I chucked that idea out. After spending three full days on this, I realized a &lt;strong&gt;much simpler architecture&lt;/strong&gt; -&lt;/p&gt;
&lt;p&gt;&lt;img alt="ROS and Tango" src="http://siddhantsci.org/images/rostango.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Voila!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The good thing about this diagram is that it works at scale with as many ROS nodes one may like to add for the rover (Husky) without compromising on the data coming from the Tango bus. The &lt;strong&gt;missing piece&lt;/strong&gt; of the &lt;em&gt;two distributed systems&lt;/em&gt; puzzle is solved by a Tango ROS Node. Now I have a plan to work on in the second week of coding.&lt;/p&gt;
&lt;p&gt;These requirements had to be reflected in the Software Architecture Document as well. To this end, I set up the excellent &lt;a href="https://github.com/timonwong/OmniMarkupPreviewer"&gt;OmniMarkupPreviewer&lt;/a&gt; for &lt;em&gt;Sublime Text&lt;/em&gt; to preview the &lt;strong&gt;reStructuredText&lt;/strong&gt; (&lt;strong&gt;.rst&lt;/strong&gt;) documents that I created.&lt;/p&gt;
&lt;h2&gt;Tryst with ROS and Husky&lt;/h2&gt;
&lt;p&gt;I had never worked with an Unmanned Ground Vehicle before. I did use ROS for robotics experiments at my university lab but needed to quickly jog my memory about ROS programming with &lt;strong&gt;rospy&lt;/strong&gt;. The excellent &lt;a href="http://wiki.ros.org/ROS/Tutorials"&gt;ROS wiki&lt;/a&gt; and the book &lt;strong&gt;ROS By Example&lt;/strong&gt; - &lt;/p&gt;
&lt;p&gt;&lt;img alt="ROS By Example" src="http://siddhantsci.org/images/rbxlogo.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is a haven for robot hobbyists like me and I'll continue to refer to it for time to come.&lt;/p&gt;
&lt;p&gt;Alright, I started my week with ROS programming. My first job was to bring up the simulator and make sure that Husky model responds to commands -&lt;/p&gt;
&lt;p&gt;Husky (and other ROS robots) describes movements in the form of &lt;a href="http://docs.ros.org/api/geometry_msgs/html/msg/Twist.html"&gt;Twist&lt;/a&gt; messages -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;along&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt; &lt;span class="n"&gt;velocity&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So to move in a circle, we issue [ (5,0,0) , (0,0,2) ]. This would result in a linear speed of 5 in the x direction and angular speed of 2 about the z axis, resulting in a circular motion.&lt;/p&gt;
&lt;p&gt;A simple way to explain the working is to use this command -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rostopic&lt;/span&gt; &lt;span class="n"&gt;pub&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;husky_velocity_controller&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmd_vel&lt;/span&gt; &lt;span class="n"&gt;geometry_msgs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Twist&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This publishes a Twist message to the Terminal telling the &lt;strong&gt;/husky_velocity_controller/cmd_vel&lt;/strong&gt; &lt;em&gt;ROS topic&lt;/em&gt; that the &lt;a href="http://docs.ros.org/api/geometry_msgs/html/msg/Twist.html"&gt;Twist&lt;/a&gt; denotes a linear motion of 0.5 m/s along the x direction.&lt;/p&gt;
&lt;p&gt;This is Husky in action -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Husky in action" src="http://siddhantsci.org/images/husky_in_action.png" /&gt;&lt;/p&gt;
&lt;p&gt;To do the same using rospy, the procedure is simple -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Import the required libraries (to support &lt;em&gt;rospy&lt;/em&gt;, logging, and &lt;em&gt;Twist&lt;/em&gt; messages)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;roslib&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;geometry_msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Set up a ROS node - in this case &lt;strong&gt;move&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ROS nodes act as identifiers (source and destination of messages) in the ROS distributed system (modeled as a graph)&lt;/p&gt;
&lt;p&gt;For instance, this is the ROS graph while the Husky is moving about -&lt;/p&gt;
&lt;p&gt;&lt;img alt="ROS Graph" src="http://siddhantsci.org/images/rosgraph.png" /&gt;
This is why ROS scales so well. Any number of publisher and subscriber nodes can be added to extend different applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a publisher to the appropriate ROS topic with the ROS message type &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;husky_velocity_controller&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmd_vel&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;queue_size&lt;/code&gt; argument specifies the message buffer length, and allows for asynchronous transfer of messages on the ROS meesage queue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Construct a Twist Message&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;twist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   
&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Publish the message&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was easy, isn't it?&lt;/p&gt;
&lt;p&gt;Changing the attributes can allow the Husky to move in a circle and nautilus shape -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Husky Circle" src="http://siddhantsci.org/images/husky_circle.png" /&gt;&lt;/p&gt;
&lt;p&gt;In this way, I proceeded in creating ROS nodes to accept Twist messages from any application and made a small teleoperation program on the lines of the &lt;strong&gt;Arrow&lt;/strong&gt; server in ERAS. With the help of Franco, I set up the Arrow Tango server and obtained the attributes for distance and orientation.&lt;/p&gt;
&lt;p&gt;The next aim is to use the distance and orientation information on the Tango bus and map it to Husky commands so that it may move around appropriately on ground like this -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Husky Nautilus" src="http://siddhantsci.org/images/husky_nautilus.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Random ROS Tidbit&lt;/em&gt; - While working with ROS, I came across this interesting command &lt;code&gt;source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Why do I call it interesting?&lt;/p&gt;
&lt;p&gt;It does not have a &lt;strong&gt;man-page&lt;/strong&gt;, it does not have a &lt;strong&gt;--help&lt;/strong&gt; or &lt;strong&gt;-h&lt;/strong&gt; argument. It has one simple purpose -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Execute the content of the file passed as argument &lt;strong&gt;in the current shell&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that it is not the same as &lt;strong&gt;./&lt;/strong&gt; which creates a new shell to run the command. Shells are nifty processes which allow other program processes to run. I wrote a shell from scratch for a Network Programming course assignment. You may find it &lt;a href="https://github.com/sidcode/sigshell"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Skype Meeting for Bodytracking&lt;/h2&gt;
&lt;p&gt;Franco, Yuval, Fabio, Ezio, Vito and I had an important meeting on 2nd May( a couple of hours before writing this post). The purpose of the meeting was &lt;strong&gt;Mapping Bodytracking with Telerobotics&lt;/strong&gt;. The whole point of the project is to allow complete virtual and augmented reality immersion of the astronaut and the rover. This is what it means. The robot (a humanoid or a rover) should be able to mimic human action as much as possible. How? If the astronaut runs fast on the Motivity treadmill at a particular angle, the robot should move faster with that angle relative to the moving base position. This would make use of Vito's Kinect-based bodytracking module for determining incremental distance and orientation.&lt;/p&gt;
&lt;p&gt;Since Husky understands velocity in the Twist message, the distance/orientation information must be transformed into linear/angular velocity. I'll be working on it this week. &lt;/p&gt;
&lt;p&gt;Fabio brought up the important aspect of autonomy-control in the robotic system. He pressed upon the need of having three different stimuli to the robot -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the &lt;strong&gt;Bodytracking application&lt;/strong&gt; (external)&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;robot's onboard sensors&lt;/strong&gt; (internal)&lt;/li&gt;
&lt;li&gt;From an external source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This suggestion definitely adds robustness to the entire design, it will help the robot to avoid hitting a rock and override an astronaut's command in case of danger. I will look into it this week and keep semi-autonomy in Telerobotics in mind.&lt;/p&gt;
&lt;p&gt;Yuval talked about contacting the team in Canada which facilitated Husky during V-ERAS 14. The work that I do will be tested on a real Husky eventually. &lt;/p&gt;
&lt;p&gt;Adding a UR10 robotic arm to the Husky to facilitate manipulation and imitation of the human hand was also proposed. I'll look into that after the work on steering is complete.&lt;/p&gt;
&lt;p&gt;In this way, the meeting was &lt;strong&gt;quite important&lt;/strong&gt; and a bunch of &lt;strong&gt;crucial decisions&lt;/strong&gt; regarding &lt;strong&gt;Telerobotics and Bodytracking&lt;/strong&gt; were taken.&lt;/p&gt;
&lt;h2&gt;The Week ahead&lt;/h2&gt;
&lt;p&gt;The following week, we'll have another meeting with all the students and possibly a joint code review session. I will be integrating ROS and Tango and adding support for different levels of Robot control through additional ROS nodes.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In hindsight, I was scared my GSoC coding experience would turn out be like this before the start of the &lt;a href=""&gt;Coding period&lt;/a&gt; -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Coding By the Sill" src="http://siddhantsci.org/images/codingbythesill.jpg" /&gt;
Source - &lt;a href="https://www.facebook.com/cluecomics"&gt;CLUE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;:) In fact I faced nothing like that (but the headphone and the loneliness is true :D ) There were minor setbacks. I had to reinstall ROS as a result of purging my MySQL configuration for Tango. Obviously these were the usual frustrations which crop up with computer programming and Linux, but nothing humongous.
But this is where the &lt;strong&gt;Zen of Python&lt;/strong&gt; kicks in! Using top-notch resources like the &lt;code&gt;logging&lt;/code&gt; module, &lt;code&gt;rqt-graph&lt;/code&gt;, and the inbuilt ROS logger; programming was a breeze. Add to it the awesomeness of Italian Mars Society. I faced a doubt in bodytracking, and six people decided on a Skype call to resolve the issues being faced, and resolve it we did, with gusto.&lt;/p&gt;
&lt;p&gt;The first week was super-hectic. Left with a computer and a programming problem; all-nighters were inevitable. It is proving to be a challenging and fun summer. &lt;/p&gt;
&lt;p&gt;Watch out for my next post in the GSoC 2015 series!&lt;/p&gt;
&lt;p&gt;Ciao!&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>Software Architecture Document for Telerobotics</title><link href="http://siddhantsci.org/blog/2015/05/29/software-architecture-document-for-telerobotics/" rel="alternate"></link><updated>2015-05-29T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-05-29:blog/2015/05/29/software-architecture-document-for-telerobotics/</id><summary type="html">&lt;h2&gt;The First Three Days&lt;/h2&gt;
&lt;p&gt;Hi! Last couple of days were quite hectic. I am still getting used to the &lt;em&gt;7-hours a day&lt;/em&gt; schedule of GSoC. But the good thing about GSoC is you can adjust the programming schedule according to your own convenience which is one more reason which takes it a notch above other summer coding programs. But I am devoting about 10 hours every day in these initial days to ensure I am well-positioned with respect to my timeline and also keep learning stuff on the go.&lt;/p&gt;
&lt;p&gt;Rants aside, I recently completed the first draft of the Software Architecture Document for my project.&lt;/p&gt;
&lt;h2&gt;Software Architecture Document&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Software Architecture Document&lt;/strong&gt; (quite funnily abbreviated as SAD) is an important (read very) piece of information which entails and ensures what a software project is going to look like when it is built and shipped. I must thank the Italian Mars Society for giving me the much-needed push into the world of Open Source Software Engineering.&lt;/p&gt;
&lt;p&gt;Architecture of any program, especially open-source programs, as described in the excellent book &lt;a href="http://aosabook.org/en/index.html"&gt;Architecture of Open Source Applications&lt;/a&gt; describes software in terms of &lt;strong&gt;different&lt;/strong&gt; layers of abstraction components, depending on who wants to look and improve upon it. Open source applications are a product of efforts of multiple people working on different aspects of a project together. To facilitate effective and non-redundant collaboration with proper version control, a software architecture document comes in handy.&lt;/p&gt;
&lt;p&gt;To put it in one line - &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SAD ensures all developers, testers, and users are on the same page.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;SAD for Telerobotics Application&lt;/h2&gt;
&lt;p&gt;Take my &lt;strong&gt;Telerobotics application&lt;/strong&gt; for instance. It is made up of three &lt;em&gt;distinct&lt;/em&gt; &lt;strong&gt;features&lt;/strong&gt; or &lt;strong&gt;functional requirements&lt;/strong&gt; - &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mapping Human body-tracking information to rover motion instructions&lt;/li&gt;
&lt;li&gt;Allowing real-time streaming of the rover's stereo camera-feed to the ERAS application&lt;/li&gt;
&lt;li&gt;Providing an Augmented reality interface obtained from the processing the rover sensor data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I am the only developer working on these aspects currently, I must ensure that the application is in a &lt;strong&gt;well-maintained state&lt;/strong&gt; throughout the life of the project. I must also ensure that a developer with skills in Robotics gets relevant information to the Robotics subsystem of the application (ROS knowledge). I must separate the concerns of a Network Communications developer from the user (the astronaut) while working on Real-time streaming from the rover to the Head Mounted Virtual Reality device.&lt;/p&gt;
&lt;p&gt;While the features describe the expected behaviour of the software system, they require a lot of background machinery which is essential for operation but not relevant for exposing to the end-user. These are &lt;strong&gt;non-functional requirements&lt;/strong&gt;. To give an example, &lt;strong&gt;Robotics Operating System&lt;/strong&gt; is used to manouver the Husky robot around. But the astronaut or the software system need not be concerned that robot communication, control, and command (C3 architecture) takes place using ROS or other robot platforms like YARP or Player/Stage. &lt;/p&gt;
&lt;p&gt;Non-functional requirements in turn are quite important for satisfying the performance requirements of the software system. For instance, the Real-time streaming protocol (RTSP) that I'll be working with soon directly impacts the performance requirement of &lt;strong&gt;Hard-Real Time streaming support.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Software Architecture Document is generic in that it keeps in mind the evolving technology that may be used to cater to the application in focus. For instance, the &lt;strong&gt;Unmanned Ground Vehicle&lt;/strong&gt; currently being considered is the &lt;strong&gt;Husky rover&lt;/strong&gt;. It is my responsibilty to ensure that the logical layers are independent of the robot being used. The software should be &lt;strong&gt;extensible&lt;/strong&gt; easily to a future ground vehicle that may use an altogether different control architecture than &lt;strong&gt;ROS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, SAD is practical. It describes the timeline of development of the features.&lt;/p&gt;
&lt;h2&gt;My experience with SADs&lt;/h2&gt;
&lt;p&gt;Working on the SAD has been an immensely edifying experience for me for several reasons -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My first foray into Software Engineering literature.&lt;/li&gt;
&lt;li&gt;Learning &lt;em&gt;reStructuredText&lt;/em&gt; as the documentation tool for SAD.&lt;/li&gt;
&lt;li&gt;Appreciating how finely ingrained software-engineering principles are with Programming Language design. For instance, the sections of a SAD directly imbue the features of Object Oriented Programming (abstraction, encapsulation, separation of concern) and Functional Programming (Side effects, Higher-order functions).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Links to the document&lt;/h2&gt;
&lt;p&gt;If you are interested, the link to my &lt;a href="https://bitbucket.org/italianmarssociety/eras/src/132fff239c3ff892f7cfc8836d3a2921244e444e/servers/telerobotics/doc/?at=default"&gt;software architecture document source is this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation on readthedocs can be found &lt;a href="eras.readthedocs.org/en/latest/servers/telerobotics/doc/sad.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until my next post on my first week of coding.&lt;/p&gt;
&lt;p&gt;Ciao!&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>Workspace Setup for Telerobotics</title><link href="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/" rel="alternate"></link><updated>2015-05-26T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-05-26:blog/2015/05/26/workspace-setup-for-telerobotics/</id><summary type="html">&lt;p&gt;Hi! Yesterday was the start of the &lt;strong&gt;coding period&lt;/strong&gt; which will continue for another 12 weeks. The &lt;a href="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/"&gt;Community Bonding period&lt;/a&gt; gave me enough time to install the required packages. This post explains those packages in minimal detail.&lt;/p&gt;
&lt;h2&gt;Project Components&lt;/h2&gt;
&lt;p&gt;My work would heavily require the use of -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ROS (Robot Operating System)&lt;/strong&gt; to work with the &lt;a href="www.clearpathrobotics.com/husky/"&gt;Husky Rover&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="ROS Logo" src="http://siddhantsci.org/images/roslogo.png" /&gt;&lt;/p&gt;
&lt;p&gt;ROS is the meta-operating system which is very popular with roboticists. My future posts would describe my work with ROS and the concepts that I am using, in detail.&lt;/p&gt;
&lt;p&gt;More specifically, I am working with ROS Indigo Igloo, which is a LTS (Long-term support) release&lt;/p&gt;
&lt;p&gt;&lt;img alt="Indigo Logo" src="http://siddhantsci.org/images/indigologo.png" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Gazebo Simulation environment&lt;/strong&gt; to test the programs written to drive the Husky around&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Gazebo Logo" src="http://siddhantsci.org/images/gazebologo.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am working with Gazebo version 2.2.3.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tango-Controls&lt;/strong&gt; Supervisory Control and Data Acquistion system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If data from different devices is the blood of ERAS, then Tango is the circulatory system. It does an excellent job of handling multiple devices (Motivity treadmill, Kinect Sensors, Blender Game Engine Instances, and in my case a ROS machine with Husky interfaces)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tango Logo" src="http://siddhantsci.org/images/tangologo.png" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Blender Game Engine&lt;/strong&gt; to model the standalone V-ERAS application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Blender Logo" src="http://siddhantsci.org/images/blenderlogo.png" /&gt;&lt;/p&gt;
&lt;p&gt;The V-ERAS simulation of the spacecraft looks like this -&lt;/p&gt;
&lt;p&gt;&lt;img alt="V-ERAS simulation" src="http://siddhantsci.org/images/verassim.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the second phase of the project, I will be involved in real-time streaming of rover stereo camera feed to the displays in the V-ERAS simulation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; (of course :D )&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Python Logo" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/python-logo.png" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu 14.04 (Trusty Tahr)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ROS Indigo offers complete support for this version of Ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ubuntu Logo" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/ubuntulogo.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;To Python-ify my experience even further, I installed &lt;strong&gt;Terminator&lt;/strong&gt;, a Python-based program which makes terminal arrangement as flexible as humanly possible on Linux.&lt;/p&gt;
&lt;p&gt;Working with ROS requires opening up a lot of terminal  and Terminator makes this hassle-free.&lt;/p&gt;
&lt;p&gt;Take a look for yourselves -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Terminator" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/terminator.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am using different text editors for different purposes.&lt;/p&gt;
&lt;p&gt;While working with &lt;strong&gt;Markdown&lt;/strong&gt; and &lt;strong&gt;reStructuredText&lt;/strong&gt;, I use Sublime Text.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sublime Text Logo" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/sublimelogo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Vim is my editor of choice for all things Python. I have been using it for open-source development since last year.&lt;/p&gt;
&lt;p&gt;So, with this I wrap up this setup post.&lt;/p&gt;
&lt;p&gt;Just for kicks, this is what my desktop looks like -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Desktop IMS" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/desktop.png" /&gt;&lt;/p&gt;
&lt;p&gt;I must admit it keeps me motivated to design software for Mars missions. Just in case you're wondering, the theme I use is the MacBuntu theme. It is pretty distraction-free.&lt;/p&gt;
&lt;h2&gt;To Coding and beyond!&lt;/h2&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category><category term="IMS"></category><category term="Italian Mars Society"></category></entry><entry><title>GSoC '15 Community Bonding</title><link href="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/" rel="alternate"></link><updated>2015-05-23T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-05-23:blog/2015/05/23/gsoc-15-community-bonding/</id><summary type="html">&lt;p&gt;Third Post in the GSoC 2015 series. Here I'll take you through the engaging community bonding experience.&lt;/p&gt;
&lt;h2&gt;Introduction to Community Bonding&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Community Bonding&lt;/strong&gt; is arguably one of the most important phases of the Google Summer of Code. In the 2015 edition, it took place from April 27 to May 25. This is what the &lt;a href="http://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2015/help_page"&gt;GSoC FAQ&lt;/a&gt; has to say about this period -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Students get to know mentors, read documentation, get up to speed to begin working on their projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;About the community&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ERAS logo" src="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/images/eras-logo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Italian Mars Society&lt;/strong&gt; is a highly motivated group of incredibly smart and friendly scientists and developers who share the vision of working towards manned missions to Mars. I have been interacting with the community since March 2015 and I've never looked back. I was interested in the projects even during the brief period when it was unclear whether IMS would be able to participate or not. I'm grateful to the community members for applying under the Python Software Foundation umbrella and giving students like me a brilliant opportunity to explore real world Open Source development. From what I've heard, this organization comes up with the &lt;em&gt;coolest&lt;/em&gt; projects for GSoC. And I concur with them - my project seems to blend in all the cool fields required for exploration - Robotics, Body-tracking, Virtual Reality, Oculus Rift, Real-time 3-D video streaming, Augmented Reality, etc.&lt;/p&gt;
&lt;h2&gt;Understanding the Codebase&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Mercurial logo" src="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/images/mercurial.png" /&gt;&lt;/p&gt;
&lt;p&gt;To this end, there is a stable amount of software/hardware development shared on the Bitbucket platform. While interacting with Franco and Ezio, I discovered that all students are given &lt;strong&gt;write access&lt;/strong&gt; to the &lt;a href="https://bitbucket.org/italianmarssociety/eras/"&gt;ERAS&lt;/a&gt; and &lt;a href="https://bitbucket.org/italianmarssociety/v-eras-blender"&gt;V-ERAS&lt;/a&gt; repositories using the &lt;strong&gt;Mercurial&lt;/strong&gt; revision control system. This imparts tremendous responsiblity as new developers which I very much appreciate since it fosters trust and makes us mature community members. &lt;/p&gt;
&lt;p&gt;Going through the codebase a couple of weeks ago, I found well-documented code, almost all of which follows the PEP8 guidelines and written in Python 3. The heart of the V-ERAS project is the &lt;a href="http://www.tango-controls.org/"&gt;Tango Controls&lt;/a&gt; server which is a distributed device server for Supervisory Control and Data Acquistion systems. This is ideal for a complex environment like ERAS where multiple hardware and software devices like the Oculus VR, Kinect, Linux Machines, Husky Rover, and Blender Game Engine applications are involved in a distributed setup. The entire networking subsystem of ERAS is well-explained in &lt;a href="http://erasproject.org/download/the-networking-sub-system-of-t-he-virtual-european-mar-s-analog-station-e-melotti-bachelors-thesis/"&gt;Ezio's thesis&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Interacting with the Community&lt;/h2&gt;
&lt;p&gt;My experience with the Italian Mars Society has been memorable and pleasant right from the word go when I first entered the hallowed &lt;strong&gt;IMS&lt;/strong&gt; channel of IRC (Internet Relay Chat) and introduced myself. I was promptly pointed to the right person for my project of interest. Within a single IRC Chat session with Franco, I got a clear idea of what to expect from this GSoC. The IRC channel though frequented by a small number of people is always bustling with activity. We've had fruitful discussion for each and every part of the project - from software architecture diagrams in the proposal, to the collaboration between two GSoC projects, and even some fun interactions about Python software development and Mars exploration. I always appreciate the levels of responsibity and feedback that the community members muster during interacting with students. Helping my fellow GSoC aspirants and seeking help from them is always a refreshing experience. Apart from IRC and Email, I got the chance to &lt;strong&gt;video-conference&lt;/strong&gt; with all the project mentors on two occasions - &lt;em&gt;during my GSoC interview and in the Kickoff meeting after the GSoC selection&lt;/em&gt;. This was the first time I had a teleconference interview and I thank IMS for that. It felt more like a sincere discussion of the things that I had in mind for the GSoC project rather than a test of my skills. The trust these guys had in me let me confidently speak out my mind which helped me make my points. The big GSoC Kickoff meeting meetup took place on April 29, 2015 where we all gathered on &lt;strong&gt;Google Hangouts&lt;/strong&gt; to discuss various important points for the upcoming summer of code such as -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The importance of blogging&lt;/li&gt;
&lt;li&gt;Hardware/Software requirements&lt;/li&gt;
&lt;li&gt;Strategic timeline of events&lt;/li&gt;
&lt;li&gt;Software engineering guidelines&lt;/li&gt;
&lt;li&gt;Suggestions of joint code review sessions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I helped prepare the meeting minutes for this session since some members faced connection problems to join the Hangout. These are shared in &lt;a href="https://docs.google.com/document/d/1jRhBnmjlMINCjwuomrE18BPTKnUO8974-I9qexb5TfQ/edit?usp=sharing"&gt;this document&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setup and Technologies&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Husky Rover" src="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/images/husky1.jpe" /&gt;&lt;/p&gt;
&lt;p&gt;I have been exposed to an ample number of new concepts and technologies with this project. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Terrain Vehicle Rover&lt;/strong&gt; - Clearpath Robotics' &lt;strong&gt;Husky robot&lt;/strong&gt; which is ROS-based&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Microsoft Kinect Sensor&lt;/strong&gt; for obtaining body-tracking information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minoru 3-d webcam&lt;/strong&gt; for stereo video streaming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oculus Rift Development Kit 2&lt;/strong&gt; for augmented reality applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To this end, I set up my workstation for the &lt;a href="https://docs.google.com/document/d/11iE-pQ8wEX8BUwbexGgULJddv0xWRN98MYRrd0iunOI/edit?usp=sharing"&gt;project requirements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My current machine configuration for this GSoC project is as follows:&lt;/p&gt;
&lt;p&gt;-Ubuntu 14.04.2 (Trusty Tahr)
-ROS Indigo
-Python 3
-Blender 2.74
-Tango Controls 1.99
-Linux Kernel 3.2
-Mercurial 3.4
-Hardware: 8 GB RAM, Intel Core i7 processor, Nvidia 2GB GPU GT650M&lt;/p&gt;
&lt;p&gt;In the last couple of weeks, I have been busy with setting up the various ROS packages which are required for &lt;em&gt;bodytracking based semi-autonmous teleoperation&lt;/em&gt;. The list of ROS packages will be added to the project documentation soon.&lt;/p&gt;
&lt;h2&gt;Learning Experience so far&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ffmpeg" src="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/images/ffmpeg.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've learnt an unexpected great deal about a lot of different things during this project. I had to do a lot of reading to get up to speed with the existing state of V-ERAS. Franco pointed me to the &lt;a href="https://eras.readthedocs.org/en/latest/index.html"&gt;project documentation pages&lt;/a&gt;. I learned about Blender and Blender Game Engine after pulling an all-nighter. FFMPEG followed soon after that where I had to set up a MJPEG streaming server for the BGE client. That was followed by my first experience with PEP8, Mercurial, architecture diagrams, Tango Control system. My GSoC proposal has been an extensive piece of work with 61 revisions and brilliant feedback from my mentors. The proposal can be found &lt;a href="http://erasproject.org/2015-gsoc/#2"&gt;here&lt;/a&gt;. A more comprehensive description of the project is taken up in &lt;a href="gsoc-02-project-details.md"&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To be continued...about ROS, Software Testing, Mapping, algorithms, etc&lt;/em&gt;&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category></entry><entry><title>GSoC '15 - About my Project</title><link href="http://siddhantsci.org/blog/2015/05/07/gsoc-15-about-my-project/" rel="alternate"></link><updated>2015-05-07T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-05-07:blog/2015/05/07/gsoc-15-about-my-project/</id><summary type="html">&lt;p&gt;Second Post in the GSoC 2015 series. This post is intended to explain my project proposal.&lt;/p&gt;
&lt;p&gt;The project proposal that I submitted can be found &lt;a href="http://erasproject.org/2015-gsoc/#2"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ERAS Station" src="http://siddhantsci.org/blog/2015/05/07/gsoc-15-about-my-project/images/eras-station.jpg" /&gt;
&lt;em&gt;to be continued...&lt;/em&gt;&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category></entry><entry><title>GSoC 2015 with the Italian Mars Society</title><link href="http://siddhantsci.org/blog/2015/04/29/gsoc-2015-with-the-italian-mars-society/" rel="alternate"></link><updated>2015-04-29T00:53:52+00:00</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-04-29:blog/2015/04/29/gsoc-2015-with-the-italian-mars-society/</id><summary type="html">&lt;p&gt;&lt;img alt="GSoC Banner" src="http://siddhantsci.org/blog/2015/04/29/gsoc-2015-with-the-italian-mars-society/images/gsoc-banner.png" /&gt;&lt;/p&gt;
&lt;p&gt;I got accepted into the eleventh edition of the &lt;strong&gt;Google Summer of Code&lt;/strong&gt; program (&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2015"&gt;GSoC 2015&lt;/a&gt;) with the &lt;strong&gt;Python Software Foundation&lt;/strong&gt; umbrella organization. The list of selected students was announced on 28th April, 2015.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python Logo" src="http://siddhantsci.org/blog/2015/05/26/workspace-setup-for-telerobotics/images/python-logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;More specifically, I'll be working with the Italian Mars Society under the ERAS (European MaRs Analogue Station) project. 
Quoting from the &lt;a href="http://erasproject.org/"&gt;source&lt;/a&gt; -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The European MaRs Analogue Station for Advanced Technologies Integration (ERAS) is a program spearheaded by the Italian Mars Society (IMS) which main goal is to provide an effective test bed for field operation studies in preparation for manned missions to Mars.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="ERAS logo" src="http://siddhantsci.org/blog/2015/05/23/gsoc-15-community-bonding/images/eras-logo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The focus of this GSoC project is &lt;strong&gt;Virtual Reality based Telerobotics&lt;/strong&gt; for V-ERAS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual European Mars Analog Station (V-ERAS)&lt;/strong&gt; is based on immersive real-time environment simulations running on top of the Blender Game Engine (BGE).&lt;/p&gt;
&lt;p&gt;This project has three distinct components - &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;ROS-Kinect&lt;/strong&gt; interface for the Teleoperative control of the Clearpath Husky Robot rover's motion via human body-tracking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming the 3-D stereo camera video feed&lt;/strong&gt; from the rover to BGE over the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processing the video feed into an &lt;strong&gt;Augmented Reality&lt;/strong&gt; experience through a &lt;strong&gt;head-mounted Virtual Reality device&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The goal of this V-ERAS project is thus to develop a software and hardware system that enhances the capabilities of the crew members preparing for Mars missions.&lt;/p&gt;
&lt;p&gt;I feel elated to be a part of the Italian Mars Society and be able to contribute towards manned space exploration which is one of the vital aims of the next two decades. GSoC marks my first foray into the world of collaborative Open Source software development.&lt;/p&gt;
&lt;p&gt;I shall be mentored by two really cool people - &lt;a href="https://il.linkedin.com/in/yuvalbrodsky"&gt;Yuval Brodsky&lt;/a&gt; and &lt;a href="https://plus.google.com/105053384149339279492/posts"&gt;Fabio Nigi&lt;/a&gt; with whom I share my interests in space exploration, robotics, networks, and free software. In addition, I'll be constantly interacting with the IMS-ERAS community - &lt;a href="in.linkedin.com/pub/franco-carbognani/3/998/145"&gt;Franco Carbognani&lt;/a&gt;, Ezio Melotti, Mario Tambos, Ambar Mehrotra, Shridhar Mishra, Vito Gentile. &lt;/p&gt;
&lt;p&gt;Thank you Google for this unique birthday gift :)&lt;/p&gt;
&lt;p&gt;Looking forward to a great and challenging summer of Code!&lt;/p&gt;
&lt;p&gt;I'll share the details of the project in the next post in this series.&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category><category term="computers"></category><category term="science"></category><category term="exploration"></category><category term="space"></category><category term="mars"></category></entry><entry><title>GSoC RSS Feed Test Post</title><link href="http://siddhantsci.org/blog/2015/04/16/gsoc-rss-feed-test-post/" rel="alternate"></link><updated>2015-04-16T18:10:52+05:30</updated><author><name>Siddhant Shrivastava</name></author><id>tag:siddhantsci.org,2015-04-16:blog/2015/04/16/gsoc-rss-feed-test-post/</id><summary type="html">&lt;p&gt;Much GSoC. So RSS. Very Python :)&lt;/p&gt;
&lt;p&gt;This is a test blog post to check if the &lt;strong&gt;atom.xml&lt;/strong&gt; for the category &lt;strong&gt;GSoC&lt;/strong&gt; works or not. Python Software Foundation motivates its students to blog at least once in every two weeks (stating the frequency of posting in clear terms because biweekly can be ambiguous sometimes). &lt;/p&gt;
&lt;p&gt;Blogging the &lt;strong&gt;developments&lt;/strong&gt; is essential for any constructive task; in my case the task is Open Source Software development using Python.&lt;/p&gt;
&lt;h2&gt;Why Blog?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Developments entail success, setbacks(interestingly &lt;em&gt;failure&lt;/em&gt; is not used in this industry because nobody ever fails), issues, progress, discussion on design aspects and learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Update(29th April, 2015)&lt;/h2&gt;
&lt;p&gt;The list of accepted students was announced yesterday(amazingly coinciding with my birthday). I have been accepted for the Google Summer of Code program as a student under the Python Software Foundation umbrella with the organization - Italian Mars Society. A detailed post on my acceptance can be found here.&lt;/p&gt;</summary><category term="GSoC"></category><category term="Python"></category><category term="PSF"></category></entry></feed>